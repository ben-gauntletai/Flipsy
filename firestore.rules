rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User document rules
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && (
        request.auth.uid == userId ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followersCount', 'followingCount'])
      );
      
      // Liked videos subcollection
      match /likedVideos/{videoId} {
        allow read: if true;
        allow write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Video document rules
    match /videos/{videoId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['likesCount', 'commentsCount', 'shareCount', 'views'])
      );
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;

      // Comments subcollection rules
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update: if request.auth != null && (
          resource.data.userId == request.auth.uid ||
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likesCount', 'replyCount'])
        );
        allow delete: if request.auth != null && resource.data.userId == request.auth.uid;

        // Comment likes subcollection
        match /likes/{userId} {
          allow read: if true;
          allow write: if request.auth != null && request.auth.uid == userId;
        }
      }
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        // Allow initial query setup even if no documents match
        resource == null
      );
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Follow relationship rules
    match /follows/{followId} {
      allow read: if true;
      allow create: if request.auth != null && 
        request.auth.uid != request.resource.data.followingId;  // Prevent self-following
      allow delete: if request.auth != null && 
        (followId.split('_')[0] == request.auth.uid);
    }
  }
} 