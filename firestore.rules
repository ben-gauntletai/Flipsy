rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User document rules
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Liked videos subcollection
      match /likedVideos/{videoId} {
        allow read: if true;
        allow write: if request.auth != null && request.auth.uid == userId;
      }

      // Bookmarked videos subcollection
      match /bookmarkedVideos/{videoId} {
        allow read: if true;
        allow write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Collections rules
    match /collections/{collectionId} {
      // Allow listing/querying collections
      allow list: if request.auth != null;
      
      // Allow reading individual collections
      allow get: if request.auth != null;
      
      allow create: if 
        request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      
      allow update, delete: if 
        request.auth != null && 
        resource.data.userId == request.auth.uid;

      // Collection videos subcollection
      match /videos/{videoId} {
        allow read: if request.auth != null;
        
        // Allow creating video entries if you own the collection
        allow create: if 
          request.auth != null && 
          get(/databases/$(database)/documents/collections/$(collectionId)).data.userId == request.auth.uid;
        
        // Allow updating video entries if you own the collection
        allow update: if 
          request.auth != null && 
          get(/databases/$(database)/documents/collections/$(collectionId)).data.userId == request.auth.uid;
        
        // Allow deleting video entries if you own the collection
        allow delete: if 
          request.auth != null && 
          get(/databases/$(database)/documents/collections/$(collectionId)).data.userId == request.auth.uid;
      }
    }

    // Video document rules
    match /videos/{videoId} {
      allow read: if 
        // Allow reading active videos based on privacy settings
        resource.data.status == 'active' && (
          // Public videos are readable by anyone
          resource.data.privacy == 'everyone' ||
          // Private videos are only readable by the owner
          (resource.data.privacy == 'private' && request.auth != null && request.auth.uid == resource.data.userId) ||
          // Followers-only videos are readable by followers and the owner
          (resource.data.privacy == 'followers' && (
            request.auth != null && (
              request.auth.uid == resource.data.userId ||
              exists(/databases/$(database)/documents/follows/$(request.auth.uid + '_' + resource.data.userId))
            )
          ))
        );
      
      // Allow listing videos by status
      allow list: if true;
      
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['likesCount', 'commentsCount', 'shareCount', 'views', 'bookmarkCount'])
      );
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;

      // Comments subcollection rules
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update: if request.auth != null && (
          resource.data.userId == request.auth.uid ||
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likesCount', 'replyCount'])
        );
        allow delete: if request.auth != null && resource.data.userId == request.auth.uid;

        // Comment likes subcollection
        match /likes/{userId} {
          allow read: if true;
          allow create, delete: if request.auth != null && request.auth.uid == userId;
        }

        // Comment replies subcollection
        match /replies/{replyId} {
          allow read: if true;
          allow create: if request.auth != null;
          allow update: if request.auth != null && (
            resource.data.userId == request.auth.uid ||
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likesCount'])
          );
          allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
        }
      }
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        // Allow initial query setup even if no documents match
        resource == null
      );
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Follow relationship rules
    match /follows/{followId} {
      allow read: if true;
      allow create: if request.auth != null && 
        followId == request.auth.uid + '_' + request.resource.data.followingId;
      allow delete: if request.auth != null && 
        followId == request.auth.uid + '_' + resource.data.followingId;
    }
  }
} 